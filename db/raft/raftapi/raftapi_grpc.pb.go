// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: raftapi.proto

package raftapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RaftKVService_Put_FullMethodName          = "/raftapi.RaftKVService/Put"
	RaftKVService_Get_FullMethodName          = "/raftapi.RaftKVService/Get"
	RaftKVService_GetCacheHits_FullMethodName = "/raftapi.RaftKVService/GetCacheHits"
)

// RaftKVServiceClient is the client API for RaftKVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftKVServiceClient interface {
	// Existing unary methods:
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetCacheHits(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CacheHitsResponse, error)
}

type raftKVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftKVServiceClient(cc grpc.ClientConnInterface) RaftKVServiceClient {
	return &raftKVServiceClient{cc}
}

func (c *raftKVServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, RaftKVService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftKVServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, RaftKVService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftKVServiceClient) GetCacheHits(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CacheHitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheHitsResponse)
	err := c.cc.Invoke(ctx, RaftKVService_GetCacheHits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftKVServiceServer is the server API for RaftKVService service.
// All implementations must embed UnimplementedRaftKVServiceServer
// for forward compatibility.
type RaftKVServiceServer interface {
	// Existing unary methods:
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetCacheHits(context.Context, *Empty) (*CacheHitsResponse, error)
	mustEmbedUnimplementedRaftKVServiceServer()
}

// UnimplementedRaftKVServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaftKVServiceServer struct{}

func (UnimplementedRaftKVServiceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedRaftKVServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRaftKVServiceServer) GetCacheHits(context.Context, *Empty) (*CacheHitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCacheHits not implemented")
}
func (UnimplementedRaftKVServiceServer) mustEmbedUnimplementedRaftKVServiceServer() {}
func (UnimplementedRaftKVServiceServer) testEmbeddedByValue()                       {}

// UnsafeRaftKVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftKVServiceServer will
// result in compilation errors.
type UnsafeRaftKVServiceServer interface {
	mustEmbedUnimplementedRaftKVServiceServer()
}

func RegisterRaftKVServiceServer(s grpc.ServiceRegistrar, srv RaftKVServiceServer) {
	// If the following call pancis, it indicates UnimplementedRaftKVServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RaftKVService_ServiceDesc, srv)
}

func _RaftKVService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftKVServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftKVService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftKVServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftKVService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftKVServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftKVService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftKVServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftKVService_GetCacheHits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftKVServiceServer).GetCacheHits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftKVService_GetCacheHits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftKVServiceServer).GetCacheHits(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftKVService_ServiceDesc is the grpc.ServiceDesc for RaftKVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftKVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftapi.RaftKVService",
	HandlerType: (*RaftKVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _RaftKVService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RaftKVService_Get_Handler,
		},
		{
			MethodName: "GetCacheHits",
			Handler:    _RaftKVService_GetCacheHits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftapi.proto",
}
